*** S_{ees, Qlock} BEGIN
fmod PID is
  sort Pid .
  ops p1 p2 p3 p4 p5 p6 p7 p8 : -> Pid [ctor] .
endfm

fmod LOCATION is
  sort Location .
  ops rs ws cs : -> Location [ctor] .
endfm

*** Labeled Event lE
fmod LEVENT is
  pr PID .
  sort LEvent .
  op notran : -> LEvent . *** notran = iota
  ops dose want try exit : Pid -> LEvent .
endfm

fmod QUEUE is
  pr PID .
  sort Queue .
  op empty : -> Queue [ctor] .
  op _|_ : Pid Queue -> Queue [ctor] .
  op enq : Queue Pid -> Queue .
  op deq : Queue -> Queue .
  var Q : Queue .
  vars X Y : Pid .
  eq enq(empty,X) = X | empty .
  eq enq(Y | Q,X) = Y | enq(Q,X) .
  eq deq(empty) = empty .
  eq deq(X | Q) = Q .
endfm

fmod SOUP is
  pr PID .
  pr LOCATION .
  pr QUEUE .
  pr LEVENT .
  sorts OComp Soup .
  subsort OComp < Soup .
  *** observable components
  op pc[_]:_ : Pid Location -> OComp [ctor] .
  op queue:_ : Queue -> OComp [ctor] .
  op le:_ : LEvent -> OComp [ctor] .
  *** soup
  op __ : Soup Soup -> Soup [ctor assoc comm] .
endfm
*** S_{ees, Qlock} END

*** I_{ees, Qlock}
fmod INIT-SOUP is
  pr SOUP .
  ops init2 init3 init4 init5 init6 init7 init8 : -> Soup .
  eq init2 = (pc[p1]: rs) (pc[p2]: rs) (queue: empty) (le: notran) .
  eq init3 = (pc[p1]: rs) (pc[p2]: rs) (pc[p3]: rs) (queue: empty) (le: notran) .
  eq init4 = (pc[p1]: rs) (pc[p2]: rs) (pc[p3]: rs) (pc[p4]: rs) (queue: empty) (le: notran) .
  eq init5 = (pc[p1]: rs) (pc[p2]: rs) (pc[p3]: rs) (pc[p4]: rs) (pc[p5]: rs) (queue: empty) (le: notran) .
  eq init6 = (pc[p1]: rs) (pc[p2]: rs) (pc[p3]: rs) (pc[p4]: rs) (pc[p5]: rs) (pc[p6]: rs) (queue: empty) (le: notran) .
  eq init7 = (pc[p1]: rs) (pc[p2]: rs) (pc[p3]: rs) (pc[p4]: rs) (pc[p5]: rs) (pc[p6]: rs) (pc[p7]: rs) (queue: empty) (le: notran) .
  eq init8 = (pc[p1]: rs) (pc[p2]: rs) (pc[p3]: rs) (pc[p4]: rs) (pc[p5]: rs) (pc[p6]: rs) (pc[p7]: rs) (pc[p8]: rs) (queue: empty) (le: notran) .
endfm

*** T_{ees, Qlock}
mod TRANSITION is
  pr SOUP .
  var Q : Queue .
  var I : Pid .
  var E : LEvent .
  rl [dose] : (pc[I]: rs) (le: E)
           => (pc[I]: rs) (le: dose(I)) .
  rl [want] : (pc[I]: rs) (queue: Q) (le: E)
           => (pc[I]: ws) (queue: enq(Q,I)) (le: want(I)) .
  rl [try]  : (pc[I]: ws) (queue: (I | Q)) (le: E)
           => (pc[I]: cs) (queue: (I | Q)) (le: try(I)) .
  rl [exit] : (pc[I]: cs) (queue: Q) (le: E)
           => (pc[I]: rs) (queue: deq(Q)) (le: exit(I)) .
endm

in model-checker .
*** P_{ees, Qlock}, L_{ees, Qlock}
mod QLOCK-PROP is
  pr TRANSITION .
  inc SATISFACTION .
  subsort Soup < State .
*** P_{ees, Qlock}
  ops wait crit : Pid -> Prop .
  ops enabled applied : LEvent -> Prop .
*** L_{ees, Qlock}
  var I : Pid .
  var Q : Queue .
  var S : Soup .
  var PR : Prop .
  var E : LEvent .
  eq (pc[I]: ws) S |= wait(I) = true .
  eq (pc[I]: cs) S |= crit(I) = true .
  eq (pc[I]: rs) S |= enabled(dose(I)) = true .
  eq (pc[I]: rs) S |= enabled(want(I)) = true .
  eq (pc[I]: ws) (queue: (I | Q)) S |= enabled(try(I)) = true .
  eq (pc[I]: cs) S |= enabled(exit(I)) = true .
  eq (le: E) S   |= applied(E) = true .
  eq S |= PR = false [owise] .
endm

mod QLOCK-FORMULA is
  pr INIT-SOUP .
  inc QLOCK-PROP .
  inc MODEL-CHECKER .
  inc LTL-SIMPLIFIER .
  var E : LEvent .
  var I : Pid .
  op wf : LEvent -> Formula .
  eq wf(E) = (<> [] enabled(E)) -> ([] <> applied(E)) .
endm

mod PROC2MC is
  pr QLOCK-FORMULA .
  ops mutex2 lofree2 fair2 qfair2 : -> Formula .
  eq mutex2 = [] ~(crit(p1) /\ crit(p2)) .
  eq lofree2 = (wait(p1) |-> crit(p1)) /\ (wait(p2) |-> crit(p2)) .
  eq fair2 = wf(dose(p1)) /\ wf(dose(p2)) /\
             wf(want(p1)) /\ wf(want(p2)) /\
             wf(try(p1)) /\ wf(try(p2)) /\
             wf(exit(p1)) /\ wf(exit(p2)) .
endm
red in PROC2MC : modelCheck(init, fair2 -> lofree2) .
